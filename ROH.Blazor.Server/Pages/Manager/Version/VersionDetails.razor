@page "/Manager/Version/VersionDetails/{versionGuid}"
@using ROH.Blazor.Server.Interfaces.Api;
@using ROH.Blazor.Server.Interfaces.Helpers;
@using ROH.StandardModels.Version;
@using ROH.Utils.Helpers;
@using Microsoft.AspNetCore.Components.Forms;

@inject IVersionService _versionService;
@inject IVersionFileService _versionFileService;
@inject ISweetAlertService _sweetAlert;

<Pages.Components.CardComponent Header="Version">
    <div class="row">
        <div class="col-sm-1">
            <label for="Version">Version:</label>
        </div>
        <div class="col-sm-1">
            <input type="number" id="Version" class="form-control" @bind="gameVersion.Version" readonly />
        </div>

        <div class="col-sm-1">
            <label for="Release">Release:</label>
        </div>
        <div class="col-sm-1">
            <input type="number" id="Release" class="form-control" @bind="gameVersion.Release" readonly />
        </div>

        <div class="col-sm-1">
            <label for="Review">Review:</label>
        </div>
        <div class="col-sm-1">
            <input type="number" id="Review" class="form-control" @bind="gameVersion.Review" readonly />
        </div>

        @if (gameVersion.ReleaseDate.HasValue)
        {
            <div class="col-sm-1">
                <label for="ReleaseDate">Released Date:</label>
            </div>
            <div class="col-sm-3">
                <input type="date" id="ReleaseDate" class="form-control" @bind="gameVersion.ReleaseDate" readonly />
            </div>
        }

    </div>
</Pages.Components.CardComponent>

<Pages.Components.CardComponent Header="Version Files">
    <EditForm Model="gameVersionFile" OnValidSubmit="HandleSubmit">
        <div class="form-group">
            <label for="file">Files:</label>
            <InputFile id="file" multiple OnChange="HandleFileSelection" />
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</Pages.Components.CardComponent>

@code {
    [Parameter]
    public string? versionGuid { get; set; }

    private GameVersionModel gameVersion = new();

    private ICollection<GameVersionFileModel> gameVersionFile = new List<GameVersionFileModel>();

    private IReadOnlyList<IBrowserFile>? selectedFiles;

    protected override async Task OnInitializedAsync()
    {
        await GetVersionByGuid();
    }

    private async Task GetVersionByGuid()
    {
        if (Guid.TryParse(versionGuid, out Guid guid))
        {
            var response = await _versionService.GetVersionDetails(guid);

            if (response != null && response.HttpStatus.IsSuccessStatusCode())
                gameVersion = response?.ResponseToModel<GameVersionModel>() ?? new();
            else if (response != null)
                await _sweetAlert.ShowResponse(response);
        }
        else
        {
            await _sweetAlert.Show("ERROR", "Incorrect uuid version", Helpers.Types.SweetAlertType.Error);
        }

        StateHasChanged();
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        await Task.CompletedTask;
    }

    private async Task HandleSubmit(EditContext editContext)
    {

        if (selectedFiles != null && selectedFiles.Any())
        {
            string fileName;
            string fileExtension;
            string fileContent;
            long fileSize = 0;
            bool uploaded = false;
            foreach (var file in selectedFiles)
            {
                fileName = file.Name;
                fileExtension = Path.GetExtension(fileName);
                fileSize = file.Size;

                using (var stream = file.OpenReadStream(1024000000))
                {
                    byte[] buffer = new byte[stream.Length];
                    await stream.ReadAsync(buffer, 0, buffer.Length);
                    fileContent = Convert.ToBase64String(buffer);
                }


                var responseUpload = await _versionFileService.UploadVersionFile(
                    new GameVersionFileModel(
                        fileName, 
                        "", 
                        fileExtension, 
                        fileContent,
                        fileSize,
                        gameVersion
                    )
                );

                if (responseUpload != null && !responseUpload.HttpStatus.IsSuccessStatusCode())
                    await _sweetAlert.ShowResponse(responseUpload);
                else if (responseUpload != null && responseUpload.HttpStatus.IsSuccessStatusCode())
                    uploaded = true;

            }

            if (uploaded)
                await _sweetAlert.Show("Upload File", "File has been uploaded", Helpers.Types.SweetAlertType.Success);

        }

        await Task.CompletedTask;
    }
}
